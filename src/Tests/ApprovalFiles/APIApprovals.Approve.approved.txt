[assembly: System.CLSCompliant(false)]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Encryption.MessageProperty.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
namespace NServiceBus.Encryption.MessageProperty
{
    public class AesEncryptionService : NServiceBus.Encryption.MessageProperty.IEncryptionService
    {
        public AesEncryptionService(string encryptionKeyIdentifier, System.Collections.Generic.IDictionary<string, byte[]> keys) { }
        public AesEncryptionService(string encryptionKeyIdentifier, byte[] key) { }
        public AesEncryptionService(string encryptionKeyIdentifier, System.Collections.Generic.IDictionary<string, byte[]> keys, System.Collections.Generic.IList<byte[]> decryptionKeys) { }
        protected virtual void AddKeyIdentifierHeader(NServiceBus.Pipeline.IOutgoingLogicalMessageContext context) { }
        protected virtual void ConfigureIV(System.Security.Cryptography.Aes aes) { }
        public string Decrypt(NServiceBus.Encryption.MessageProperty.EncryptedValue encryptedValue, NServiceBus.Pipeline.IIncomingLogicalMessageContext context) { }
        public NServiceBus.Encryption.MessageProperty.EncryptedValue Encrypt(string value, NServiceBus.Pipeline.IOutgoingLogicalMessageContext context) { }
        protected virtual bool TryGetKeyIdentifierHeader(out string keyIdentifier, NServiceBus.Pipeline.IIncomingLogicalMessageContext context) { }
    }
    [System.Serializable]
    public class EncryptedString : System.Runtime.Serialization.ISerializable
    {
        public EncryptedString() { }
        public EncryptedString(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public NServiceBus.Encryption.MessageProperty.EncryptedValue EncryptedValue { get; set; }
        public string Value { get; set; }
        public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public static string op_Implicit(NServiceBus.Encryption.MessageProperty.EncryptedString s) { }
        public static NServiceBus.Encryption.MessageProperty.EncryptedString op_Implicit(string s) { }
    }
    [System.Serializable]
    public class EncryptedValue
    {
        public EncryptedValue() { }
        public string Base64Iv { get; set; }
        public string EncryptedBase64Value { get; set; }
    }
    public static class EncryptionConfigurationExtensions
    {
        public static void EnableMessagePropertyEncryption(this NServiceBus.EndpointConfiguration configuration, NServiceBus.Encryption.MessageProperty.IEncryptionService encryptionService) { }
        public static void EnableMessagePropertyEncryption(this NServiceBus.EndpointConfiguration configuration, NServiceBus.Encryption.MessageProperty.IEncryptionService encryptionService, System.Func<System.Reflection.PropertyInfo, bool> encryptedPropertyConvention) { }
    }
    public static class EncryptionHeaders
    {
        public const string EncryptionKeyIdentifier = "NServiceBus.RijndaelKeyIdentifier";
    }
    public interface IEncryptionService
    {
        string Decrypt(NServiceBus.Encryption.MessageProperty.EncryptedValue encryptedValue, NServiceBus.Pipeline.IIncomingLogicalMessageContext context);
        NServiceBus.Encryption.MessageProperty.EncryptedValue Encrypt(string value, NServiceBus.Pipeline.IOutgoingLogicalMessageContext context);
    }
}